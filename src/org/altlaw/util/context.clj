(ns org.altlaw.util.context)

(defn get-property-function [name]
  (System/getProperty name))

(defn use-property-function [f]
  (alter-var-root #'get-property-function (fn [_] f)))

(defn use-hadoop-jobconf [jobconf]
  (use-property-function (fn [name] (.get jobconf name))))

(defn get-property [name]
  (or (get-property-function name)
      (throw (Exception. (str "Missing property " name)))))


;;; PUBLIC

(defn altlaw-home
  "AltLaw's home directory, as String."
  []
  (get-property "org.altlaw.home"))

(defn altlaw-env
  "AltLaw's running environment, a String.
  One of production/development/testing."
  []
  (get-property "org.altlaw.env"))

(defn www-content-dir
  "Root directory for markdown content files for 'about' pages on
  www.altlaw.org" []
  (java.io.File. (str (altlaw-home) "/src/org/altlaw/www/content")))

(defn www-public-dir
  "Root directory for public files generated by code and served via
  HTTP on www.altlaw.org" []
  (java.io.File. (str (altlaw-home) "/var/public")))

(defn www-static-dir 
  "Root directory for public files under version control that are
  served via HTTP on www.altlaw.org" []
  (java.io.File. (str (altlaw-home) "/src/org/altlaw/www/static")))

(defn solr-home 
  "Solr home directory for running Solr instances."
  []
  (java.io.File. (str (altlaw-home) "/var/solr")))

(defn aws-access-key-id []
  (or (get-property-function "org.altlaw.aws.access.key.id")
      (get-property-function "fs.s3.awsAccessKeyId")
      (throw (Exception. "No AWS Access Key ID (tried org.altlaw.aws.access.key.id and fs.s3.awsAccessKeyID)"))))

(defn aws-secret-access-key []
  (or (get-property-function "org.altlaw.aws.secret.access.key")
      (get-property-function "fs.s3.awsSecretAccessKey")
      (throw (Exception. "No AWS Secret Access Key (tried org.altlaw.aws.secret.access.key and fs.s3.awsSecretAccessKey)"))))

(defn admin-username []
  (get-property "org.altlaw.www.admin.username"))

(defn admin-password []
  (get-property "org.altlaw.www.admin.password"))
